{
  "public static void main(String[] args)": {
    "description": "main",
    "prefix": "main",
    "body": "public static void main(String[] args) {\n\t$0\n}"
  },
  "public static final": {
    "description": "public static final",
    "prefix": "psf",
    "body": "public static final $1 $2 = $3;"
  },
  "private static final": {
    "description": "private static final",
    "prefix": "prsf",
    "body": "private static final $1 $2 = $3;"
  },
  "public static final String": {
    "description": "public static final String",
    "prefix": "psfs",
    "body": "public static final String $1 = \"$2\";"
  },
  "private static final String": {
    "description": "private static final String",
    "prefix": "prsfs",
    "body": "private static final String $1 = \"$2\";"
  },
  "public static final int": {
    "description": "public static final int",
    "prefix": "psfi",
    "body": "public static final int $1 = $2;"
  },
  "private static final int": {
    "description": "private static final int",
    "prefix": "prsfi",
    "body": "private static final int $1 = $2;"
  },
  "public static final long": {
    "description": "public static final long",
    "prefix": "psfl",
    "body": "public static final long $1 = $2L;"
  },
  "private static final long": {
    "description": "private static final long",
    "prefix": "prsfl",
    "body": "private static final long $1 = $2L;"
  },
  "public static final double": {
    "description": "public static final double",
    "prefix": "psfd",
    "body": "public static final double $1 = $2D;"
  },
  "private static final double": {
    "description": "private static final double",
    "prefix": "prsfd",
    "body": "private static final double $1 = $2D;"
  },
  "public static final float": {
    "description": "public static final float",
    "prefix": "psff",
    "body": "public static final float $1 = $2F;"
  },
  "private static final float": {
    "description": "private static final float",
    "prefix": "prsff",
    "body": "private static final float $1 = $2F;"
  },
  "public static final boolean": {
    "description": "public static final boolean",
    "prefix": "psfb",
    "body": "public static final boolean $1 = $2;"
  },
  "private static final boolean": {
    "description": "private static final boolean",
    "prefix": "prsfb",
    "body": "private static final boolean $1 = $2;"
  },
  "public static final byte": {
    "description": "public static final byte",
    "prefix": "psfb",
    "body": "public static final byte $1 = $2;"
  },
  "private static final byte": {
    "description": "private static final byte",
    "prefix": "prsfb",
    "body": "private static final byte $1 = $2;"
  },
  "public static final char": {
    "description": "public static final char",
    "prefix": "psfc",
    "body": "public static final char $1 = $2;"
  },
  "private static final char": {
    "description": "private static final char",
    "prefix": "prsfc",
    "body": "private static final char $1 = $2;"
  },
  "public static final short": {
    "description": "public static final short",
    "prefix": "psfs",
    "body": "public static final short $1 = $2;"
  },
  "private static final short": {
    "description": "private static final short",
    "prefix": "prsfs",
    "body": "private static final short $1 = $2;"
  },
  "arrayList": {
    "prefix": "al",
    "body": "final List<$1> $2 = new ArrayList<>();",
    "description": "ArrayList"
  },
  "String": {
    "prefix": "s",
    "body": "String",
    "description": "String"
  },
  "StringBuilder": {
    "prefix": "sb",
    "body": "final StringBuilder $1 = new StringBuilder();",
    "description": "StringBuilder"
  },
  "Java Class": {
    "prefix": "jclass",
    "body": ["public class ${1:ClassName} {", "  $0", "}"],
    "description": "Create a new Java class"
  },
  "Main Method": {
    "prefix": "main",
    "body": ["public static void main(String[] args) {", "  $0", "}"],
    "description": "Create a main method"
  },
  "System.out.println": {
    "prefix": "sout",
    "body": ["System.out.println(${1:message});"],
    "description": "Print a message to the console"
  },
  "Constructor": {
    "prefix": "constructor",
    "body": ["public ${1:ClassName}(${2:parameters}) {", "  $0", "}"],
    "description": "Create a constructor"
  },
  "Getter": {
    "prefix": "getter",
    "body": [
      "public ${1:Type} get${2:Property}() {",
      "  return ${3:property};",
      "}"
    ],
    "description": "Create a getter method"
  },
  "Setter": {
    "prefix": "setter",
    "body": [
      "public void set${1:Property}(${2:Type} ${3:property}) {",
      "  this.${3:property} = ${3:property};",
      "}"
    ],
    "description": "Create a setter method"
  },
  "If Statement": {
    "prefix": "if",
    "body": ["if (${1:condition}) {", "  $0", "}"],
    "description": "Create an if statement"
  },
  "For Loop": {
    "prefix": "for",
    "body": [
      "for (int ${1:i} = 0; ${1:i} < ${2:array}.length; ${1:i}++) {",
      "  $0",
      "}"
    ],
    "description": "Create a for loop"
  },
  "Enhanced For Loop": {
    "prefix": "foreach",
    "body": ["for (${1:Type} ${2:element} : ${3:collection}) {", "  $0", "}"],
    "description": "Create an enhanced for loop"
  },
  "Try-Catch Block": {
    "prefix": "trycatch",
    "body": [
      "try {",
      "  $0",
      "} catch (${1:Exception} ${2:e}) {",
      "  ${3:e}.printStackTrace();",
      "}"
    ],
    "description": "Create a try-catch block"
  },
  "String Format": {
    "prefix": "strformat",
    "body": [
      "String formattedString = String.format(\"${1:format}\", ${2:args});",
      "$0"
    ],
    "description": "Format a string using String.format"
  },
  "String Concatenation": {
    "prefix": "strconcat",
    "body": ["String concatenatedString = ${1:string1} + ${2:string2};", "$0"],
    "description": "Concatenate two strings"
  },
  "StringBuilder Append": {
    "prefix": "strbuilder",
    "body": [
      "StringBuilder sb = new StringBuilder();",
      "sb.append(${1:string});",
      "$0",
      "String result = sb.toString();"
    ],
    "description": "Build a string using StringBuilder"
  },
  "String Join": {
    "prefix": "strjoin",
    "body": [
      "String joinedString = String.join(\"${1:delimiter}\", ${2:elements});",
      "$0"
    ],
    "description": "Join multiple strings with a delimiter"
  },
  "String format": {
    "prefix": "strformat",
    "body": "String.format(\"${1:format}\", ${2:args});",
    "description": "Format a string using String.format"
  },
  "Null Check": {
    "prefix": "ncheck",
    "body": "if (${1:object} == null) {\n  ${2:System.out.println(\"Object is null\");}\n}",
    "description": "Check if an object is null"
  }
}
