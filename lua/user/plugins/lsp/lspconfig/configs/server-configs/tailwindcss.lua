local M = {}
M.setup = function()
    return {
        filetypes = {
            'aspnetcorerazor',
            'astro',
            'astro-markdown',
            'blade',
            'clojure',
            'django-html',
            'htmldjango',
            'edge',
            'eelixir',
            'elixir',
            'ejs',
            'erb',
            'eruby',
            'gohtml',
            'gohtmltmpl',
            'haml',
            'handlebars',
            'hbs',
            'html',
            -- 'html-eex',
            'heex',
            'jade',
            'leaf',
            'liquid',
            'markdown',
            'mdx',
            'mustache',
            'njk',
            'nunjucks',
            'php',
            'razor',
            'slim',
            'twig',
            'css',
            'less',
            'postcss',
            'sass',
            'scss',
            'stylus',
            'sugarss',
            'javascript',
            'javascriptreact',
            'reason',
            'rescript',
            'typescript',
            'typescriptreact',
            'vue',
            'svelte',
            'templ',
            'angular.html',
        },
        init_options = {
            userLanguages = {
                templ = 'html',
                eelixir = 'html-eex',
                eruby = 'erb',
                ['angular.html'] = 'html',
            },
        },
        settings = {
            tailwindCSS = {
                classAttributes = {
                    'class',
                    'className',
                    'class:list',
                    'classList',
                    'ngClass',
                    '.*class.*',
                    '.*Class.*',
                    '.*classes.*',
                    '.*Classes.*',
                    '.*className.*',
                    'ngClass',
                    '.*style.*',
                    '.*Style.*',
                    '.*styles.*',
                    '.*Styles.*',
                },
                experimental = {
                    classRegex = {
                        "/\\* tw \\*/ '([^']*)",
                        '/\\* tw \\*/ `([^`]*)',
                        '/\\* tw \\*/ "([^"]*)',
                        { '/\\* tw \\*/ {([^;]*);', "'([^']*)'" },
                        { '/\\* tw \\*/ {([^;]*);', "`([^']*)`" },
                        { '/\\* tw \\*/ {([^;]*);', '"([^"]*)"' },
                        { '{# tw #} ([^}]*)}', "'([^']*)'" },
                        { '{# tw #} ([^}]*)}', '"([^"]*)"' },
                        { 'Classes \\=([^;]*);', "'([^']*)'" },
                        { 'Classes \\=([^;]*);', '"([^"]*)"' },
                        {
                            'Classes \\=([^;]*);',
                            '\\`([^\\`]*)\\`',
                        },
                        { 'Styles \\=([^;]*);', "'([^']*)'" },
                        { 'Styles \\=([^;]*);', '"([^"]*)"' },
                        {
                            'Styles \\=([^;]*);',
                            '\\`([^\\`]*)\\`',
                        },
                    },
                },

                lint = {
                    cssConflict = 'warning',
                    invalidApply = 'error',
                    invalidConfigPath = 'error',
                    invalidScreen = 'error',
                    invalidTailwindDirective = 'error',
                    invalidVariant = 'error',
                    recommendedVariantOrder = 'warning',
                },
                validate = true,
            },
        },
    }
end

return M
